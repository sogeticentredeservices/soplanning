image: docker:stable

stages:
  - Build Alpine image
  - Build Stretch image
  - Push to Registry
  - Scan for CVE

before_script:
  - docker info
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

docker build:
  stage: Build Alpine image
  variables:
    LATEST_VER: $CI_REGISTRY_IMAGE:alpine
    MAJOR_VER:  $CI_REGISTRY_IMAGE:1.43-alpine
  script:
    - docker build --pull -t $LATEST_VER -t $MAJOR_VER 1.43/alpine/
  only:
    - master

docker build:
  stage: Build Stretch image
  variables:
    LATEST_VER: $CI_REGISTRY_IMAGE:latest
    MAJOR_VER:  $CI_REGISTRY_IMAGE:1.43
  script:
    - docker build --pull -t $LATEST_VER -t $MAJOR_VER -t ${MAJOR_VER}-stretch 1.43/stretch/
  only:
    - master

docker push:
  stage: Push to Registry
  variables:
    LATEST_VER:        $CI_REGISTRY_IMAGE:latest
    MAJOR_VER:         $CI_REGISTRY_IMAGE:1.43
    VARIANT_VER:       $CI_REGISTRY_IMAGE:alpine
    VARIANT_MAJOR_VER: $CI_REGISTRY_IMAGE:1.43-alpine
  script:
    - docker push $LATEST_VER
    - docker push $MAJOR_VER
    - docker push $VARIANT_VER
    - docker push $VARIANT_MAJOR_VER
  only:
    - master

# https://docs.gitlab.com/ee/ci/examples/container_scanning.html
container_scanning:
  stage: Scan for CVE
  variables:
    ## Define two new variables based on GitLab's CI/CD predefined variables
    ## https://docs.gitlab.com/ee/ci/variables/#predefined-environment-variables
    LATEST_VER:  $CI_REGISTRY_IMAGE:latest
    VARIANT_VER: $CI_REGISTRY_IMAGE:alpine
  allow_failure: true
  when: manual
  script:
    - apk add -U wget ca-certificates
    - docker pull ${LATEST_VER}
    - wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
    - mv clair-scanner_linux_amd64 clair-scanner
    - chmod +x clair-scanner
    - touch clair-whitelist.yml
    - while( ! wget -q -O /dev/null http://clair:6060/v1/namespaces ) ; do sleep 1 ; done
    - retries=0
    - echo "Waiting for clair daemon to start"
    - while( ! wget -T 10 -q -O /dev/null http://clair:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
    - ./clair-scanner -c http://clair:6060 --ip $(hostname -i) -r gl-container-scanning-report.json -l clair.log -w clair-whitelist.yml ${LATEST_VER} || true
    - ./clair-scanner -c http://clair:6060 --ip $(hostname -i) -r gl-container-scanning-report-alpine.json -l clair.log -w clair-whitelist.yml ${VARIANT_VER} || true
  artifacts:
    paths: [gl-container-scanning-report.json, gl-container-scanning-report-alpine.json]
